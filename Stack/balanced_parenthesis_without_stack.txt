bool parenthesis_without_stack(string s, int n) {
    if(n == 0)
        return true;
    if(n == 1)
        return false;
    if(s[0] == ')' || s[0] == '}' || s[0] == ']')
        return false;
    
    char closing;
    switch (s[0])
    {
        case '(':
            closing = ')';
            break;
        
        case '{':
            closing = '}';
            break;
        
        case '[':
            closing = ']';
            break;
        default:
            break;
    }

    int count = 0, i = 0;
    for(i = 1; i<n; i++) {
        if(s[i] == s[0]) {
            count++;
        } else if(s[i] == closing) {
            if(count == 0)
                break;
            count--;
        }
    }

    if(i == n)
        return false;
    if(i == 1)
        return find2(s.substr(2), n-2);
    
    return find2(s.substr(1,i-1), i-1) && find2(s.substr(i+1), n-i-1);
}

//n is the size of string